{"ast":null,"code":"var _jsxFileName = \"/Users/smanor/Development/code/personal/mynichi/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport pageService from './services/Pages';\nimport Page from './components/Page';\n\n/* crud\npages: (date, todo, events, entry, images)\n - create\n - read\n - update\n - destroy\n\ntodo:\n - create\n - read\n - update (whole page updates instead?)\n - destroy\n\nevents:\n - create\n - read\n - update (whole page updates instead?)\n - destroy\n\nentry: (no create because it will automatically be created upon page creation, no delete because it's required)\n - read\n - update (whole page updates instead?)\n\nimages: (dont need update cause you should delete/create for new image, pages by default have \"\" for all image places)\n - create\n - read\n - destroy\n*/\n\n// new Date ex. Fri Mar 17 2023 16:59:43 GMT-0400 (Eastern Daylight Time)\n// creates as object\n// getDate() => 17\n// getMonth() + 1 because its 0-index => 3\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentPage, setCurrentPage] = useState({});\n  const [allPages, setAllPages] = useState([]);\n  useEffect(() => {\n    pageService.read().then(initialPages => {\n      setAllPages(initialPages);\n      const firstPageId = initialPages.length - 1;\n      setCurrentPage(initialPages[firstPageId]);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: currentPage !== undefined ? /*#__PURE__*/_jsxDEV(Page, {\n      currentPage: currentPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 36\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ixGJ1K5ioZc4Qk9+w1wJ9hbJ61Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","pageService","Page","jsxDEV","_jsxDEV","App","_s","currentPage","setCurrentPage","allPages","setAllPages","read","then","initialPages","firstPageId","length","className","children","undefined","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/smanor/Development/code/personal/mynichi/src/App.js"],"sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\nimport pageService from './services/Pages';\nimport Page from './components/Page';\n\n/* crud\npages: (date, todo, events, entry, images)\n - create\n - read\n - update\n - destroy\n\ntodo:\n - create\n - read\n - update (whole page updates instead?)\n - destroy\n\nevents:\n - create\n - read\n - update (whole page updates instead?)\n - destroy\n\nentry: (no create because it will automatically be created upon page creation, no delete because it's required)\n - read\n - update (whole page updates instead?)\n\nimages: (dont need update cause you should delete/create for new image, pages by default have \"\" for all image places)\n - create\n - read\n - destroy\n*/\n\n// new Date ex. Fri Mar 17 2023 16:59:43 GMT-0400 (Eastern Daylight Time)\n// creates as object\n// getDate() => 17\n// getMonth() + 1 because its 0-index => 3\n\nfunction App() {\n  const [currentPage, setCurrentPage] = useState({});\n  const [allPages, setAllPages] = useState([]);\n\n  useEffect(() => {\n    pageService.read()\n      .then(initialPages => {\n        setAllPages(initialPages);\n\n        const firstPageId = initialPages.length - 1;\n        setCurrentPage(initialPages[firstPageId]);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {/* <button onClick={() => console.log(currentPage)}>button</button> */}\n      {/* <Page currentPage={currentPage} /> */}\n      {currentPage !== undefined ? <Page currentPage={currentPage} /> : null}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAO,WAAW;AAClB,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,IAAI,MAAM,mBAAmB;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACdE,WAAW,CAACU,IAAI,EAAE,CACfC,IAAI,CAACC,YAAY,IAAI;MACpBH,WAAW,CAACG,YAAY,CAAC;MAEzB,MAAMC,WAAW,GAAGD,YAAY,CAACE,MAAM,GAAG,CAAC;MAC3CP,cAAc,CAACK,YAAY,CAACC,WAAW,CAAC,CAAC;IAC3C,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEV,OAAA;IAAKY,SAAS,EAAC,KAAK;IAAAC,QAAA,EAGjBV,WAAW,KAAKW,SAAS,gBAAGd,OAAA,CAACF,IAAI;MAACK,WAAW,EAAEA;IAAY;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,GAAG;EAAI;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAClE;AAEV;AAAChB,EAAA,CArBQD,GAAG;AAAAkB,EAAA,GAAHlB,GAAG;AAuBZ,eAAeA,GAAG;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}