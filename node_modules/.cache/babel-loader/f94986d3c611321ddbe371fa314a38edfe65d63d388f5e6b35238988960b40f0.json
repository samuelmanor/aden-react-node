{"ast":null,"code":"var _jsxFileName = \"/Users/smanor/Development/code/personal/mynichi/src/components/CalRow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CalRow(_ref) {\n  _s();\n  let {\n    id,\n    calArr,\n    handleUpdateEvent\n  } = _ref;\n  const [hover, setHover] = useState(false);\n  const [eventText, setEventText] = useState('');\n  const [editingState, setEditingState] = useState(false);\n  const calStyle = {\n    normal: {\n      cursor: 'pointer',\n      fontSize: 15,\n      display: 'flex',\n      alignItems: 'center'\n    },\n    hover: {\n      backgroundColor: 'rgba(219, 210, 195, 0.5)'\n    },\n    event: {\n      marginLeft: 10,\n      width: 200,\n      minHeight: 15\n      // border: '1px solid black'\n    },\n\n    input: {\n      border: 'none',\n      backgroundColor: 'transparent',\n      fontSize: 15,\n      width: 150\n    }\n  };\n  function updateEvent() {\n    console.log(eventText);\n    setEditingState(false);\n  }\n  ;\n  useEffect(() => {\n    let obj;\n    if (calArr) {\n      obj = calArr.find(e => e.time === id);\n    }\n    if (obj) {\n      setEventText(obj.event);\n    }\n    ;\n  }, [calArr, id]);\n  useEffect(() => {\n    const input = document.getElementById('event-input');\n    if (input) {\n      input.focus();\n    }\n    ;\n  }, [editingState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseEnter: () => setHover(true),\n    onMouseLeave: () => setHover(false),\n    style: {\n      ...calStyle.normal,\n      ...(hover ? calStyle.hover : null)\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: id % 3 === 0 || id === 0 ? id : '-'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), editingState ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"event-input\",\n        style: {\n          ...calStyle.event,\n          ...calStyle.input\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: updateEvent,\n        children: \"save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: calStyle.event,\n      onClick: () => setEditingState(true),\n      children: eventText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n_s(CalRow, \"kU/bC/YbtuxSM6WSsBmUHpdcQCM=\");\n_c = CalRow;\n;\nexport default CalRow;\n\n/*\n\n    // const [hover, setHover] = useState(false);\n    // const [eventText, setEventText] = useState('');\n    // const [editingState, setEditingState] = useState(false);\n\n// BUG: only event with latest time is shown (what the fuck)\n\n    // function updateEvent() {\n    //     handleUpdate(id, 'event', eventText);\n    //     setEditingState(false);\n    // };\n\n    // useEffect(() => {\n    //     if (calArr) {\n    //         const ev = calArr.map(e => e.time === id ? e.event : '');\n    //         setEventText(ev[1]);\n    //     };\n\n    //     const input = document.getElementById('event-input');\n    //     if (input) {\n    //         input.focus();\n    //     };\n    // }, [editingState, calArr, id]);\n\n    // const placeholder = <p style={calStyle.placeholder}>__________</p>\n\n\n\n\n            // <div onMouseEnter={() => setHover(true)} onMouseLeave={() => setHover(false)} style={{ ...calStyle.normal, ...(hover ? calStyle.hover : null)}}>\n        //     <p>{id % 3 === 0 || id === 0 ? id : '-'}</p>\n\n        //     {editingState \n        //     ? <div>\n        //         <input style={calStyle.input} id='event-input' maxLength='20' value={eventText} onChange={(e) => setEventText(e.target.value)} /> \n        //         <button style={calStyle.button} onClick={updateEvent}>save</button>\n        //       </div>\n        //     : <div onClick={() => setEditingState(true)} style={{ ...calStyle.normal, ...calStyle.event }}>{eventText !== '' ? eventText : placeholder}</div>}\n        // </div>\n\n*/\nvar _c;\n$RefreshReg$(_c, \"CalRow\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CalRow","_ref","_s","id","calArr","handleUpdateEvent","hover","setHover","eventText","setEventText","editingState","setEditingState","calStyle","normal","cursor","fontSize","display","alignItems","backgroundColor","event","marginLeft","width","minHeight","input","border","updateEvent","console","log","obj","find","e","time","document","getElementById","focus","onMouseEnter","onMouseLeave","style","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/smanor/Development/code/personal/mynichi/src/components/CalRow.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction CalRow({ id, calArr, handleUpdateEvent }) {\n    const [hover, setHover] = useState(false);\n    const [eventText, setEventText] = useState('');\n    const [editingState, setEditingState] = useState(false);\n\n    const calStyle = {\n        normal: {\n            cursor: 'pointer',\n            fontSize: 15,\n            display: 'flex',\n            alignItems: 'center',\n        },\n\n        hover: {\n            backgroundColor: 'rgba(219, 210, 195, 0.5)',\n        },\n\n        event: {\n            marginLeft: 10,\n            width: 200,\n            minHeight: 15,\n            // border: '1px solid black'\n        },\n\n        input: {\n            border: 'none',\n            backgroundColor: 'transparent',\n            fontSize: 15,\n            width: 150\n        }\n    };\n\n    function updateEvent() {\n        console.log(eventText);\n        setEditingState(false);\n    };\n\n    useEffect(() => {\n        let obj;\n        if (calArr) {\n            obj = calArr.find(e => e.time === id);\n        }\n\n        if (obj) {\n            setEventText(obj.event);\n        };\n    }, [calArr, id]);\n\n    useEffect(() => {\n        const input = document.getElementById('event-input');\n        if (input) {\n            input.focus();\n        };\n    }, [editingState]);\n\n    return (\n        <div onMouseEnter={() => setHover(true)} onMouseLeave={() => setHover(false)} style={{ ...calStyle.normal, ...(hover ? calStyle.hover : null)}}>\n            <p>{id % 3 === 0 || id === 0 ? id : '-'}</p>\n\n            {editingState \n                ? \n                <div>\n                    <input id='event-input' style={{ ...calStyle.event, ...calStyle.input }} />\n                    <button onClick={updateEvent}>save</button>\n                </div>\n                : \n                <div style={calStyle.event} onClick={() => setEditingState(true)}>{eventText}</div>\n            }\n        </div>\n    );\n};\n\nexport default CalRow;\n\n/*\n\n    // const [hover, setHover] = useState(false);\n    // const [eventText, setEventText] = useState('');\n    // const [editingState, setEditingState] = useState(false);\n\n// BUG: only event with latest time is shown (what the fuck)\n\n    // function updateEvent() {\n    //     handleUpdate(id, 'event', eventText);\n    //     setEditingState(false);\n    // };\n\n    // useEffect(() => {\n    //     if (calArr) {\n    //         const ev = calArr.map(e => e.time === id ? e.event : '');\n    //         setEventText(ev[1]);\n    //     };\n\n    //     const input = document.getElementById('event-input');\n    //     if (input) {\n    //         input.focus();\n    //     };\n    // }, [editingState, calArr, id]);\n\n    // const placeholder = <p style={calStyle.placeholder}>__________</p>\n\n\n\n\n            // <div onMouseEnter={() => setHover(true)} onMouseLeave={() => setHover(false)} style={{ ...calStyle.normal, ...(hover ? calStyle.hover : null)}}>\n        //     <p>{id % 3 === 0 || id === 0 ? id : '-'}</p>\n\n        //     {editingState \n        //     ? <div>\n        //         <input style={calStyle.input} id='event-input' maxLength='20' value={eventText} onChange={(e) => setEventText(e.target.value)} /> \n        //         <button style={calStyle.button} onClick={updateEvent}>save</button>\n        //       </div>\n        //     : <div onClick={() => setEditingState(true)} style={{ ...calStyle.normal, ...calStyle.event }}>{eventText !== '' ? eventText : placeholder}</div>}\n        // </div>\n\n*/"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,MAAMA,CAAAC,IAAA,EAAoC;EAAAC,EAAA;EAAA,IAAnC;IAAEC,EAAE;IAAEC,MAAM;IAAEC;EAAkB,CAAC,GAAAJ,IAAA;EAC7C,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMgB,QAAQ,GAAG;IACbC,MAAM,EAAE;MACJC,MAAM,EAAE,SAAS;MACjBC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAE,MAAM;MACfC,UAAU,EAAE;IAChB,CAAC;IAEDX,KAAK,EAAE;MACHY,eAAe,EAAE;IACrB,CAAC;IAEDC,KAAK,EAAE;MACHC,UAAU,EAAE,EAAE;MACdC,KAAK,EAAE,GAAG;MACVC,SAAS,EAAE;MACX;IACJ,CAAC;;IAEDC,KAAK,EAAE;MACHC,MAAM,EAAE,MAAM;MACdN,eAAe,EAAE,aAAa;MAC9BH,QAAQ,EAAE,EAAE;MACZM,KAAK,EAAE;IACX;EACJ,CAAC;EAED,SAASI,WAAWA,CAAA,EAAG;IACnBC,OAAO,CAACC,GAAG,CAACnB,SAAS,CAAC;IACtBG,eAAe,CAAC,KAAK,CAAC;EAC1B;EAAC;EAEDd,SAAS,CAAC,MAAM;IACZ,IAAI+B,GAAG;IACP,IAAIxB,MAAM,EAAE;MACRwB,GAAG,GAAGxB,MAAM,CAACyB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAK5B,EAAE,CAAC;IACzC;IAEA,IAAIyB,GAAG,EAAE;MACLnB,YAAY,CAACmB,GAAG,CAACT,KAAK,CAAC;IAC3B;IAAC;EACL,CAAC,EAAE,CAACf,MAAM,EAAED,EAAE,CAAC,CAAC;EAEhBN,SAAS,CAAC,MAAM;IACZ,MAAM0B,KAAK,GAAGS,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC;IACpD,IAAIV,KAAK,EAAE;MACPA,KAAK,CAACW,KAAK,EAAE;IACjB;IAAC;EACL,CAAC,EAAE,CAACxB,YAAY,CAAC,CAAC;EAElB,oBACIX,OAAA;IAAKoC,YAAY,EAAEA,CAAA,KAAM5B,QAAQ,CAAC,IAAI,CAAE;IAAC6B,YAAY,EAAEA,CAAA,KAAM7B,QAAQ,CAAC,KAAK,CAAE;IAAC8B,KAAK,EAAE;MAAE,GAAGzB,QAAQ,CAACC,MAAM;MAAE,IAAIP,KAAK,GAAGM,QAAQ,CAACN,KAAK,GAAG,IAAI;IAAC,CAAE;IAAAgC,QAAA,gBAC3IvC,OAAA;MAAAuC,QAAA,EAAInC,EAAE,GAAG,CAAC,KAAK,CAAC,IAAIA,EAAE,KAAK,CAAC,GAAGA,EAAE,GAAG;IAAG;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,EAE3ChC,YAAY,gBAETX,OAAA;MAAAuC,QAAA,gBACIvC,OAAA;QAAOI,EAAE,EAAC,aAAa;QAACkC,KAAK,EAAE;UAAE,GAAGzB,QAAQ,CAACO,KAAK;UAAE,GAAGP,QAAQ,CAACW;QAAM;MAAE;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eAC3E3C,OAAA;QAAQ4C,OAAO,EAAElB,WAAY;QAAAa,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACzC,gBAEN3C,OAAA;MAAKsC,KAAK,EAAEzB,QAAQ,CAACO,KAAM;MAACwB,OAAO,EAAEA,CAAA,KAAMhC,eAAe,CAAC,IAAI,CAAE;MAAA2B,QAAA,EAAE9B;IAAS;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAO;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAErF;AAEd;AAACxC,EAAA,CAtEQF,MAAM;AAAA4C,EAAA,GAAN5C,MAAM;AAsEd;AAED,eAAeA,MAAM;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCA,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}