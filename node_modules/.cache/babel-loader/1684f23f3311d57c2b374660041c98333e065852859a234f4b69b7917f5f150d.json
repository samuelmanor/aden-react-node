{"ast":null,"code":"var _jsxFileName = \"/Users/smanor/Development/code/personal/mynichi/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport pageService from './services/Pages';\nimport Page from './components/Page';\n\n/* crud\npages: (date, todo, events, entry, images)\n - create\n - read\n - update\n - destroy\n\ntodo:\n - create\n - read\n - update (whole page updates instead?)\n - destroy\n\nevents:\n - create\n - read\n - update (whole page updates instead?)\n - destroy\n\nentry: (no create because it will automatically be created upon page creation, no delete because it's required)\n - read\n - update (whole page updates instead?)\n\nimages: (dont need update cause you should delete/create for new image, pages by default have \"\" for all image places)\n - create\n - read\n - destroy\n*/\n\n// new Date ex. Fri Mar 17 2023 16:59:43 GMT-0400 (Eastern Daylight Time)\n// creates as object\n// getDate() => 17\n// getMonth() + 1 because its 0-index => 3\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [allPages, setAllPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState({});\n  const [pageCount, setPageCount] = useState(0);\n  const appStyle = {\n    // backgroundColor: 'red'\n  };\n  function getPage(id) {\n    pageService.getOne(id).then(initialPage => {\n      setCurrentPage(initialPage);\n      console.log(currentPage);\n    });\n  }\n  useEffect(() => {\n    // pageService.read()\n    //   .then(initialPages => {\n    //     setAllPages(initialPages);\n\n    //     const firstPageId = initialPages.length - 1;\n    //     setCurrentPage(initialPages[firstPageId]);\n    //   });\n\n    /*\n    OR: get pageCount, then getOne based on number given by pageCount, then pass that to currentPage\n    in this case allPages would become useState pageCt\n    */\n\n    pageService.pageCount().then(initialCount => {\n      setPageCount(initialCount);\n      getPage(initialCount);\n    });\n  }, []);\n  function changePage(direction) {\n    if (direction === 'forward') {\n      const nextPageId = currentPage.id;\n      getPage(nextPageId);\n    } else if (direction === 'back') {\n      const nextPageId = currentPage.id - 2;\n      getPage(nextPageId);\n    }\n    ;\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: appStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(pageCount),\n      children: \"console.log current page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Page, {\n      page: currentPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [currentPage.id > pageCount ? /*#__PURE__*/_jsxDEV(\"p\", {\n        onClick: () => changePage('back'),\n        children: \"back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 39\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentPage.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), currentPage.id < pageCount ? /*#__PURE__*/_jsxDEV(\"p\", {\n        onClick: () => changePage('forward'),\n        children: \"forward\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 39\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"W3n99cKyo68BtigEkQgigcTd3QU=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","pageService","Page","jsxDEV","_jsxDEV","App","_s","allPages","setAllPages","currentPage","setCurrentPage","pageCount","setPageCount","appStyle","getPage","id","getOne","then","initialPage","console","log","initialCount","changePage","direction","nextPageId","style","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","page","_c","$RefreshReg$"],"sources":["/Users/smanor/Development/code/personal/mynichi/src/App.js"],"sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\nimport pageService from './services/Pages';\nimport Page from './components/Page';\n\n/* crud\npages: (date, todo, events, entry, images)\n - create\n - read\n - update\n - destroy\n\ntodo:\n - create\n - read\n - update (whole page updates instead?)\n - destroy\n\nevents:\n - create\n - read\n - update (whole page updates instead?)\n - destroy\n\nentry: (no create because it will automatically be created upon page creation, no delete because it's required)\n - read\n - update (whole page updates instead?)\n\nimages: (dont need update cause you should delete/create for new image, pages by default have \"\" for all image places)\n - create\n - read\n - destroy\n*/\n\n// new Date ex. Fri Mar 17 2023 16:59:43 GMT-0400 (Eastern Daylight Time)\n// creates as object\n// getDate() => 17\n// getMonth() + 1 because its 0-index => 3\n\nfunction App() {\n  const [allPages, setAllPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState({});\n\n  const [pageCount, setPageCount] = useState(0);\n\n  const appStyle = {\n    // backgroundColor: 'red'\n  };\n\n  function getPage(id) {\n    pageService.getOne(id)\n      .then(initialPage => {\n        setCurrentPage(initialPage);\n        console.log(currentPage)\n      })\n  }\n\n  useEffect(() => {\n    // pageService.read()\n    //   .then(initialPages => {\n    //     setAllPages(initialPages);\n\n    //     const firstPageId = initialPages.length - 1;\n    //     setCurrentPage(initialPages[firstPageId]);\n    //   });\n\n\n      /*\n      OR: get pageCount, then getOne based on number given by pageCount, then pass that to currentPage\n      in this case allPages would become useState pageCt\n      */\n\n      pageService.pageCount()\n        .then(initialCount => {\n          setPageCount(initialCount);\n          \n          getPage(initialCount);\n        });\n  }, []);\n\n  function changePage(direction) {\n    if (direction === 'forward') {\n      const nextPageId = currentPage.id;\n      getPage(nextPageId);\n    } else if (direction === 'back') {\n      const nextPageId = currentPage.id - 2;\n      getPage(nextPageId);\n    };\n  };\n\n  return (\n    <div style={appStyle}>\n      <button onClick={() => console.log(pageCount)}>console.log current page</button>\n      <Page page={currentPage} />\n\n      <div>\n        {currentPage.id > pageCount ? <p onClick={() => changePage('back')}>back</p> : null}\n        <p>{currentPage.id}</p>\n        {currentPage.id < pageCount ? <p onClick={() => changePage('forward')}>forward</p> : null}\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}